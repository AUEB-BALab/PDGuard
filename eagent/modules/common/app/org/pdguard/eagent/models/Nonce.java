/*-
 * Copyright 2014-2015 Thodoris Sotiropoulos
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.pdguard.eagent.models;

import com.avaje.ebean.Model;
import play.data.validation.Constraints;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.ManyToOne;

/**
 * This class defines the entity of Nonce for database schema of
 * this application using Ebean ORM.
 *
 * A nonce is a random string, uniquely generated by the client to allow
 * the server to verify that a request has never been made before and
 * helps prevent replay attacks when requests are made over a non-secure
 * channel.  The nonce value MUST be unique across all requests with the
 * same timestamp, client credentials, and token combinations.
 *
 * For that purpose, there is an relation with the {@link Client}
 * class declaring as @ManyToOne. This means that each nonce is
 * associated with one client and one client is associated with many nonces.
 *
 * @author Thodoris Sotiropoulos
 */
@Entity
public final class Nonce extends Model {
    /** Nonce value; a unique randomly generated string. */
    @Id
    private String id;

    /**
     * Timestamp of request with the specified nonce. This field is required.
     */
    @Column(nullable = false)
    private long timestamp;

    /**
     * Mapping with the {@link Client} entity with as ManyToOne
     * relation. Each nonce is associated with one client.
     * This field is required.
     */
    @Constraints.Required
    @ManyToOne(optional = false)
    private Client client;

    /**
     * This field will be used to programatically make queries which return
     * object of this class.
     */
    private static Finder<String, Nonce> finder = new Finder<>(
            Nonce.class);

    /**
     * Initializes a nonce with the required parameters.
     *
     * @param id Nonce value; a unique randomly generated string.
     * @param timestamp Timestamp of request with the specified nonce.
     * @param client Client who generated nonce.
     */
    public Nonce(final String id, final long timestamp, final Client client) {
        this.id = id;
        this.timestamp = timestamp;
        this.client = client;
    }

    /** Add a valid nonce to the escrow agent's database. */
    public void addNonce() {
        this.save();
    }

    /**
     * This method checks if a nonce value already exists.
     *
     * @param nonceValue Nonce value to check if it exists.
     *
     * @return True if the nonce value already exists; false otherwise.
     */
    public static boolean exists(final String nonceValue) {
        return Nonce.finder.where().eq("id", nonceValue).findUnique() != null;
    }

    /**
     * Getter of id field.
     *
     * @return Nonce value; a unique randomly generated string.
     */
    public String getId() {
        return id;
    }

    /**
     * Getter of timestamp field.
     *
     * @return Timestamp of request with the specified nonce.
     */
    public long getTimestamp() {
        return timestamp;
    }

    /**
     * Getter of client field.
     *
     * @return Client who generated nonce.
     */
    public Client getClient() {
        return client;
    }

    /**
     * Getter of finder field.
     *
     * @return This field will be used to programatically make queries which
     * return object of this class.
     */
    public static Finder<String, Nonce> getFinder() {
        return finder;
    }
}
