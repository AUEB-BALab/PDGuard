# This is the main configuration file for the application.
# ~~~~~

# The application languages
# ~~~~~
play.i18n.langs="en"
# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
application.router=router.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=org.h2.Driver
db.default.url="jdbc:h2:file:modules/common/data/db"
db.default.user="admin"
db.default.password="1234"
db.default.partitionCount=4
db.default.minConnectionsPerPartition=64
db.default.maxConnectionsPerPartition=64


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="cnwrSeFsJ8gur>ERM;<uOQxtJ:mW>;kAKmHtQlqi<YdZ73AeLtyPFbRn:dCTY86q"

play.ws.ssl {
  protocol = "TLSv1.2"

  enabledProtocols = ["TLSv1.2"]

  enabledCiphers = [
    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
  ]

  play.ws.ssl.disabledSignatureAlgorithms = "MD2, MD4, MD5, SHA1, RSA"

  play.ws.ssl.disabledKeyAlgorithms = "EC keySize < 384"

  keyManager = {
    stores = [
      {
        type: "JKS",
        path: "certs/agent.keystore",
        password: "serverpassword"
      }
    ]
  }
  trustManager = {
    stores = [
      {
        path: "certs/agent.keystore",
        type: "JKS"
      }
    ]
  }
}