/*-
 * Copyright 2014-2015 Thodoris Sotiropoulos
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.pdguard.api.security;

import org.apache.commons.codec.binary.Base64;
import org.pdguard.api.exceptions.CryptoException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

/**
 * This class represents a signature of a request sent to escrow agent's web
 * services.
 *
 * In this way, escrow agent can authenticate the requester part. The following
 * approach is a signature generated by HMAC-SHA1 algorithm using a client's
 * secret for the signing of the message.
 *
 * @author Thodoris Sotiropoulos
 */
public final class Signature {
    /** Signature's value. */
    private String signatureContent;

    /** Message to sign. */
    private String messageToSign;

    /** Secret key used for the signing of the message. */
    private SecretKeySpec secret;

    /**
     * Initializes object with the message which is going to be signed and the
     * secret key which is going to be used for that purpose.
     *
     * @param messageToSign Message to sign.
     * @param secret Secret key used for the signing of the message.
     */
    public Signature(final String messageToSign, final SecretKeySpec secret) {
        this.messageToSign = messageToSign;
        this.secret = secret;
    }

    /**
     * This method HMAC algorith to create a signature based on the shared
     * secret (client's secret) between escrow agent and client.
     *
     * @throws CryptoException When an unexpected error occurs during the
     * signing of the message.
     */
    public void signMessage() throws CryptoException {
        try {
            Mac mac = Mac.getInstance("HmacSHA1");
            mac.init(secret);
            byte[] rawHmac = mac.doFinal(messageToSign.getBytes("UTF-8"));
            signatureContent = new String(Base64.encodeBase64(rawHmac),
                    "UTF-8");
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            throw new CryptoException(e.getCause());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    /**
     * Getter of secret field.
     *
     * @return Secret key for the signing of the message.
     */
    public SecretKeySpec getSecret() {
        return secret;
    }

    /**
     * Getter of the messageToSign field.
     *
     * @return Message to sign.
     */
    public String getMessageToSign() {
        return messageToSign;
    }

    /**
     * Getter of signatureContent field.
     *
     * @return Signature's value.
     */
    public String getSignatureContent() {
        return signatureContent;
    }
}
